{"version":3,"sources":["../../../../../gallery/src/js/app/GalleryView.es6"],"names":[],"mappings":"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","file":"GalleryView.js","sourcesContent":["/* jshint ignore:start */\n/* jscs:disable requireMultipleVarDecl */\nimport Backbone from 'backbone';\nimport handlebars from 'hbs/handlebars';\nimport template from 'text!./template.hbs';\nimport domConstruct from 'dojo/dom-construct';\n\nlet renderDojo = (template, el) => {\n    var component = domConstruct.toDom(template),\n        cloned = component.cloneNode(true);\n    domConstruct.place(cloned, el);\n}\n\nlet fromString = (text) => {\n    return text.replace(/ /g, '&nbsp;')\n               .replace(/</g, '&lt;')\n               .replace(/>/g, '&gt;');\n}\n\nexport default class GalleryView extends Backbone.View {\n    render(args) {\n        this.el.addEventListener('click', (evt) => {\n            if (evt.target.localName === 'ha-segmented-button' && evt.target.classList.contains('usage-tab-buttons')) {\n                this.navigate(evt.target.value);\n            }\n        });\n\n        // process the examples[].usage\n        if (args && Array.isArray(args.examples)) {\n            // the first one is selected\n            args.examples[0].selected = true;\n\n            args.examples.forEach((item) => {\n                if (item.usage) {\n                    item.usage = fromString(item.usage);\n                }\n                if (!item.dojo) {\n                    item.demoTemplate = item.template;\n                }\n            })\n        }\n\n        let compiled = handlebars.compile(template),\n            html = compiled(args);\n\n        this.$el.html(html);\n\n        // process on the html dom for dojoTemplate and render option\n        if (args && Array.isArray(args.examples)) {\n            args.examples.forEach((item) => {\n                let exampleNode = this.el.querySelector(`#${item.id}-example`);\n\n                // if dojo template provided, render by cloning\n                if (item.dojo) {\n                    renderDojo(item.template, exampleNode)\n                }\n                // if we have render function provided, allow it to run\n                if (item.render) {\n                    item.render(exampleNode);\n                }\n            }, this);\n        }\n\n        return this;\n    }\n\n    navigate(id) {\n        // hide every panel first\n        let nodes = this.el.querySelectorAll('.panel');\n        Array.prototype.forEach.call(nodes, (el) => el.classList.add('hidden'));\n\n        // show the example panel\n        this.el.querySelector(`#${id}`).classList.remove('hidden');\n    }\n};\n"]}