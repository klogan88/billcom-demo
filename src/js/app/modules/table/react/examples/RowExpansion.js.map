{"version":3,"sources":["../../../../../../../../../gallery/src/js/app/modules/table/react/examples/RowExpansion.jsx"],"names":[],"mappings":"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","file":"RowExpansion.js","sourcesContent":["import React from \"react\";\nimport Example from \"../Example\";\nimport RequestMemory from \"dstore/RequestMemory\";\nimport Table from \"hui/react-components/table/Table\";\nimport CustomRowExpansionContent from \"./common/CustomRowExpansionContent\";\nimport HALabel from \"hui/react-components/HALabel\";\n\nexport default class RowExpansion extends Example {\n    static get displayName() {\n        return \"RowExpansion\";\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: {\n                rowsPerPage: 50,\n                //Settings for custom row expansion\n                //Provide an array of render modes, and allow the table to use a specific one\n                renderModes: [{\n                    renderMode: \"defaultExpandableRow\",\n                    renderer: this.getDefaultRowExpansionArgs()\n                }],\n                //The current render mode to use\n                renderMode: \"defaultExpandableRow\"\n            }\n        };\n    }\n\n    getCode() {\n        return `import Table from \"hui-react/table/Table\"; // Be sure to optimize your layers! See the 'Design & API Document' link above.\nimport RequestMemory from \"dstore/RequestMemory\";\n// Load data from remote JSON file\n// @see https://github.com/SitePen/dstore/blob/master/src/RequestMemory.js\nconst collection = new RequestMemory({\n        target: \"js/app/modules/table/hof-batting.json\"\n    }),\n    columns = {\n      let onRenderCell = () => {\n          // Return a React Element to add to the cell\n          return (\n              <div className=\"control\">\n                <button className=\"no-button hi hi-settings\" aria-label=\"Show row expansion\"></button>\n              </div>\n          );\n        };\n\n        // To keep the React debugging tools happy in dev mode\n        onRenderCell.displayName = \"ActionButton\";\n\n        return {\n            first: {\n                label: 'First Name',\n                sortable: false\n            },\n            last: 'Last Name',\n            height: 'Height',\n            action: {                      // Derived column\n                  label: \"Action\",\n                  onRenderCell: onRenderCell, // Custom renderer\n                  sortable: false             // It's custom so no sorting\n              }\n          };\n    },\n\n    //row render arguments for default render mode\n    getDefaultRowExpansionArgs() {\n        return {\n            //optional css selector\n            activatorSelector: \".control .hi-settings\",\n            //optional expansion height property\n            expansionHeight: 80\n        };\n    },\n\n    //row render arguments for custom render mode\n    getCustomRowExpansionArgs() {\n      let onRenderRowExpansionContent = (props) => {\n        // Return a React Element to add to the row expansion\n        // You can fill in any kind of JSX you want here.\n        // @see CustomRowExpansionContent.jsx\n        return <CustomRowExpansionContent object={props.object} hideExpansion={props.hideExpansion} />;\n      };\n\n      //To keep the React debugging tools happy in dev mode\n      onRenderRowExpansionContent.displayName = \"CustomRowExpansionContent\";\n\n      //Row expansion content contract\n      onRenderRowExpansionContent.propTypes = {\n          object: React.PropTypes.object, //data object of the row\n          hideExpansion: React.PropTypes.func //callback for hiding the expansion\n      };\n\n      return {\n        //optional css selector\n        activatorSelector: \".control .hi-settings\",\n        //function that renders the content of the expanded section\n        onRenderRowExpansionContent: onRenderRowExpansionContent\n      };\n    },\n\n    //handle addition of a custom render mode\n    onCustomRenderModeAdd() {\n        let newOptions = Object.assign({}, this.state.options),\n            newRenderModes = newOptions.renderModes.concat({\n                renderMode: \"customExpandableRow\",\n                renderer: this.getCustomRowExpansionArgs()\n            });\n        newOptions.renderModes = newRenderModes;\n        //switch the render mode to custom\n        newOptions.currentRenderMode = \"customExpandableRow\";\n        this.setState({options: newOptions});\n    },\n\n    //handle removal of a custom render mode\n    onCustomRenderModeRemove() {\n        let newOptions = Object.assign({}, this.state.options),\n            newRenderModes = null;\n        if (newOptions.renderModes) {\n            newRenderModes = newOptions.renderModes.filter(renderModeItem => {\n                return renderModeItem.renderMode !== \"customExpandableRow\";\n            });\n        }\n        newOptions.renderModes = newRenderModes;\n        //switch the render mode to default\n        newOptions.currentRenderMode = \"defaultExpandableRow\";\n        this.setState({options: newOptions});\n    },\n\n    // State is being used for these options. See the full example for the constructor.\n    options = {\n        rowsPerPage: 50,\n        //Settings for custom row expansion\n        //Provide an array of render modes, and allow the table to use a specific one\n        renderModes: [{\n            renderMode: \"defaultExpandableRow\",\n            renderer: this.getDefaultRowExpansionArgs()\n        }],\n        //The current render mode to use\n        currentRenderMode: \"defaultExpandableRow\"\n    }\n};\n\nReactDOM.render(<div>\n  <div>\n    <HALabel>Current render mode is:{this.state.options.currentRenderMode}</HALabel>\n  </div>\n  <div>\n    <button className=\"ha-button\" onClick={onCustomRenderModeAdd}>Add custom render mode</button>\n    <button className=\"ha-button\" onClick={onCustomRenderModeRemove}>Remove custom render mode</button>\n  </div>\n  <Table collection={collection} columns={columns} options={options} />\n</div>, document.body);`;\n    }\n\n    getCollection() {\n        return new RequestMemory({\n            target: \"js/app/modules/table/hof-batting.json\"\n        });\n    }\n\n    getColumns() {\n        const onRenderCell = () => {\n            // Return a React Element to add to the cell\n            return (\n                <div className=\"control\">\n                    <button className=\"no-button hi hi-settings\" aria-label=\"Show row expansion\"></button>\n                </div>\n            );\n        };\n\n        // To keep the React debugging tools happy in dev mode\n        onRenderCell.displayName = \"ActionButton\";\n\n        return {\n            first: {\n                label: \"First Name\",\n                sortable: false\n            },\n            last: \"Last Name\",\n            height: \"Height\",\n            action: {                      // Derived column\n                label: \"Action\",\n                onRenderCell: onRenderCell, // Custom renderer\n                sortable: false             // It's custom so no sorting\n            }\n        };\n    }\n\n    //row render arguments for default render mode\n    getDefaultRowExpansionArgs() {\n        return {\n            //optional css selector\n            activatorSelector: \".control .hi-settings\",\n            //optional expansion height property\n            expansionHeight: 80\n        };\n    }\n\n    //row render arguments for custom render mode\n    getCustomRowExpansionArgs() {\n        const onRenderRowExpansionContent = (props) => {\n            // Return a React Element to add to the row expansion\n            // You can fill in any kind of JSX you want here.\n            // @see CustomRowExpansionContent.jsx\n            return <CustomRowExpansionContent object={props.object} hideExpansion={props.hideExpansion} />;\n        };\n\n        //To keep the React debugging tools happy in dev mode\n        onRenderRowExpansionContent.displayName = \"CustomRowExpansionContent\";\n\n        //Row expansion content contract\n        onRenderRowExpansionContent.propTypes = {\n            object: React.PropTypes.object, //data object of the row\n            hideExpansion: React.PropTypes.func //callback for hiding the expansion\n        };\n\n        return {\n            //optional css selector\n            activatorSelector: \".control .hi-settings\",\n            //function that renders the content of the expanded section\n            onRenderRowExpansionContent: onRenderRowExpansionContent\n        };\n    }\n\n    //handle addition of a custom render mode\n    onCustomRenderModeAdd() {\n        const newOptions = Object.assign({}, this.state.options),\n            newRenderModes = newOptions.renderModes.concat({\n                renderMode: \"customExpandableRow\",\n                renderer: this.getCustomRowExpansionArgs()\n            });\n        newOptions.renderModes = newRenderModes;\n        //switch the render mode to custom\n        newOptions.renderMode = \"customExpandableRow\";\n        this.setState({options: newOptions});\n    }\n\n    //handle removal of a custom render mode\n    onCustomRenderModeRemove() {\n        const newOptions = Object.assign({}, this.state.options);\n        let   newRenderModes = null;\n        if (newOptions.renderModes) {\n            newRenderModes = newOptions.renderModes.filter(renderModeItem => {\n                return renderModeItem.renderMode !== \"customExpandableRow\";\n            });\n        }\n        newOptions.renderModes = newRenderModes;\n        //switch the render mode to default\n        newOptions.renderMode = \"defaultExpandableRow\";\n        this.setState({options: newOptions});\n    }\n\n    getComponent() {\n        const collection = this.getCollection(),\n            columns = this.getColumns(),\n            options = this.state.options,\n            onCustomRenderModeAdd = this.onCustomRenderModeAdd.bind(this),\n            onCustomRenderModeRemove = this.onCustomRenderModeRemove.bind(this);\n\n        return (\n            <div>\n                <div>\n                    <HALabel>Current render mode is:  {this.state.options.renderMode}</HALabel>\n                </div>\n                <div>\n                    <button className=\"ha-button\" onClick={onCustomRenderModeAdd}>Add custom render mode</button>\n                    <button className=\"ha-button\" onClick={onCustomRenderModeRemove}>Remove custom render mode</button>\n                </div>\n                <Table collection={collection} columns={columns} options={options} />\n            </div>\n        );\n    }\n}\n"]}