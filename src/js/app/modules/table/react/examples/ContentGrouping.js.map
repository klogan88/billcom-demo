{"version":3,"sources":["../../../../../../../../../gallery/src/js/app/modules/table/react/examples/ContentGrouping.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAKqB,eAAe;;;;;;;;;;;sCAKtB;AACN,w/DAkEE;aACL;;;4CAEe;;AAEZ,uBAAO,iCAAuB;AAC1B,wBAAI,EAAE,IAAI,CAAC,YAAY,EAAE;iBAC5B,CAAC,CAAC;aACN;;;2CAGc;AACX,oBAAM,SAAS,GAAG,EAAE;oBAChB,aAAa,GAAG,CACZ,iBAAiB,EACjB,iBAAiB,EACjB,wBAAwB,EACxB,gBAAgB,CACnB,CAAC;AACN,oBAAI,CAAC,YAAA,CAAC;;AAEN,yBAAS,CAAC,IAAI,CAAC;AACX,gCAAY,EAAE,aAAa,CAAC,CAAC,CAAC;AAC9B,sBAAE,EAAE,CAAC;AACL,0BAAM,EAAE,IAAI;iBACf,CAAC,CAAC;AACH,yBAAS,CAAC,IAAI,CAAC;AACX,gCAAY,EAAE,aAAa,CAAC,CAAC,CAAC;AAC9B,sBAAE,EAAE,CAAC;AACL,0BAAM,EAAE,IAAI;iBACf,CAAC,CAAC;AACH,yBAAS,CAAC,IAAI,CAAC;AACX,gCAAY,EAAE,aAAa,CAAC,CAAC,CAAC;AAC9B,sBAAE,EAAE,CAAC;AACL,0BAAM,EAAE,IAAI;iBACf,CAAC,CAAC;AACH,yBAAS,CAAC,IAAI,CAAC;AACX,gCAAY,EAAE,aAAa,CAAC,CAAC,CAAC;AAC9B,sBAAE,EAAE,CAAC;AACL,0BAAM,EAAE,IAAI;iBACf,CAAC,CAAC;;AAEH,qBAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AACtB,6BAAS,CAAC,IAAI,CAAC;AACX,0BAAE,EAAE,CAAC,GAAG,CAAC;AACT,6BAAK,YAAU,CAAC,gBAAa;AAC7B,8BAAM,EAAG,CAAC,GAAG,CAAC;AAAC,qBAClB,CAAC,CAAC;iBACN;;AAED,uBAAO,SAAS,CAAC;aACpB;;;yCAEY;AACT,uBAAO;AACH,gCAAY,EAAE;AACV,6BAAK,EAAE,EAAE;AACT,qCAAa,EAAE,IAAI;AAAA,qBACtB;AACD,sBAAE,EAAE,IAAI;AACR,yBAAK,EAAE;AACH,6BAAK,EAAE,OAAO;AACd,iCAAS,EAAE,mBAAA,KAAK;kDAAgB,KAAK,WAAK,KAAK;yBAAM;qBACxD;iBACJ,CAAC;aACL;;;yCAEY;AACT,uBAAO;AACH,oCAAgB,EAAE,cAAc;AAChC,+BAAW,EAAE,EAAE;iBAClB,CAAC;aACL;;;2CAEc;AACX,oBAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE;oBACnC,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE;oBAC3B,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;;AAEhC,uBACI;;;oBACI,iDAAO,UAAU,EAAE,UAAU,AAAC,EAAC,OAAO,EAAE,OAAO,AAAC,EAAC,OAAO,EAAE,OAAO,AAAC,GAAG;iBACnE,CACR;aACL;;;gCA3JwB;AACrB,uBAAO,iBAAiB,CAAC;aAC5B;;;;;;sBAHgB,eAAe","file":"ContentGrouping.js","sourcesContent":["import React from \"react\";\nimport Example from \"../Example\";\nimport Table from \"hui/react-components/table/Table\";\nimport ContentGroupMemory from \"hui/table/ContentGroupMemory\";\n\nexport default class ContentGrouping extends Example {\n    static get displayName() {\n        return \"ContentGrouping\";\n    }\n\n    getCode() {\n        return (\n            `import Table from \"hui-react/table/Table\";  // Be sure to optimize your layers! See the 'Design & API Document' link above.\nimport ContentGroupMemory from \"hui/table/ContentGroupMemory\";\n\ngetGroupData() {\n        let contracts = [],\n            contractTypes = [\n                \"Weekly Contract\",\n                \"Annual Contract\",\n                \"Pay as You Go Contract\",\n                \"Empty Category\"\n            ];\n        let i;\n\n        contracts.push({\n            contractType: contractTypes[0],\n            id: 0,\n            parent: null\n        });\n        contracts.push({\n            contractType: contractTypes[1],\n            id: 1,\n            parent: null\n        });\n        contracts.push({\n            contractType: contractTypes[2],\n            id: 2,\n            parent: null\n        });\n        contracts.push({\n            contractType: contractTypes[3],\n            id: 3,\n            parent: null\n        });\n\n        for (i = 0; i < 100; i++) {\n            contracts.push({\n                id: i + 3,\n                email: \\`email\\${i}@domain.com\\`,\n                parent: (i % 3)  // the last category will never be populated\n            });\n        }\n\n        return contracts;\n// @see https://github.com/SitePen/dstore/blob/master/src/Memory.js\nconst collection = new ContentGroupMemory({\n        // note: using a special store to enable grouping\n        data: this.getGroupData()\n    }),\n    columns = {\n        contractType: {\n            label: \"\",\n            renderExpando: true  // required to display the triangle icon to expand the group\n        },\n        id: \"ID\",\n        email: {\n            label: \"Email\",\n            formatter: email => \\`<a href=\"\\${email}\">\\${email}</a>\\`\n        }\n    },\n    options = {\n        categoryProperty: \"contractType\",\n        rowsPerPage: 15\n    };\n\nReactDOM.render(<Table collection={collection} columns={columns} options={options} />, document.body);`\n        );\n    }\n\n    getCollection() {\n        // note: using a special store to enable grouping\n        return new ContentGroupMemory({\n            data: this.getGroupData()\n        });\n    }\n\n    // the data for each group / category\n    getGroupData() {\n        const contracts = [],\n            contractTypes = [\n                \"Weekly Contract\",\n                \"Annual Contract\",\n                \"Pay as You Go Contract\",\n                \"Empty Category\"\n            ];\n        let i;\n\n        contracts.push({\n            contractType: contractTypes[0],\n            id: 0,\n            parent: null\n        });\n        contracts.push({\n            contractType: contractTypes[1],\n            id: 1,\n            parent: null\n        });\n        contracts.push({\n            contractType: contractTypes[2],\n            id: 2,\n            parent: null\n        });\n        contracts.push({\n            contractType: contractTypes[3],\n            id: 3,\n            parent: null\n        });\n\n        for (i = 0; i < 100; i++) {\n            contracts.push({\n                id: i + 3,\n                email: `email${i}@domain.com`,\n                parent: (i % 3)  // the last category will never be populated\n            });\n        }\n\n        return contracts;\n    }\n\n    getColumns() {\n        return {\n            contractType: {\n                label: \"\",\n                renderExpando: true  // required to display the triangle icon to expand the group\n            },\n            id: \"ID\",\n            email: {\n                label: \"Email\",\n                formatter: email => `<a href=\"${email}\">${email}</a>`\n            }\n        };\n    }\n\n    getOptions() {\n        return {\n            categoryProperty: \"contractType\",  // enables the header in the group category\n            rowsPerPage: 45\n        };\n    }\n\n    getComponent() {\n        const collection = this.getCollection(),\n            options = this.getOptions(),\n            columns = this.getColumns();\n\n        return (\n            <div>\n                <Table collection={collection} columns={columns} options={options} />\n            </div>\n        );\n    }\n}\n"]}