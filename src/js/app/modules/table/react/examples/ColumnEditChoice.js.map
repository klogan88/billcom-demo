{"version":3,"sources":["../../../../../../../../../gallery/src/js/app/modules/table/react/examples/ColumnEditChoice.jsx"],"names":[],"mappings":"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","file":"ColumnEditChoice.js","sourcesContent":["import React from \"react\";\nimport Example from \"../Example\";\nimport RequestMemory from \"dstore/RequestMemory\";\nimport Table from \"hui/react-components/table/Table\";\nimport EditColumnPopover from \"./common/EditColumnPopover\";\n\nexport default class ColumnEditChoice extends Example {\n    static get displayName() {\n        return \"ColumnEditChoice\";\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: {\n                autoheight: true,\n                rowsPerPage: 50,\n                showTableBar: true,\n\n                // Edit options and callbacks\n                showEditMode: true,\n                editable: false,\n                editableFields: [],         // No columns are editable by default\n                editMode: \"specific\",       // We want to update specific columns instead of all of them\n                onClickEdit: event => {     // Listen for the click on the edit button so we can show our custom popover with column choices\n                    console.log(\"You clicked edit\", event);\n                    this.popover.api.show();\n                },\n                onSave: event => {\n                    console.log(\"You saved your edits\", event);\n\n                    // Save edits to the collection\n                    this.table.api.save();\n\n                    // Flip the editable state on the table\n                    const state = Object.assign({}, this.state);\n                    state.options.editable = false;\n                    this.setState(state);\n                }\n            }\n        };\n    }\n\n    getCode() {\n        return `import Table from \"hui-react/table/Table\"; // Be sure to optimize your layers! See the 'Design & API Document' link above.\nimport RequestMemory from \"dstore/RequestMemory\";\nimport EditColumnPopover from \"./common/EditColumnPopover\";\n\n// Load data from remote JSON file\n// @see https://github.com/SitePen/dstore/blob/master/src/RequestMemory.js\nconst collection = new RequestMemory({\n        target: \"js/app/modules/table/hof-batting.json\"\n    }),\n    columns = {\n        first: {\n            label: \"First Name\",\n            editor: \"ha-text-field\"     // Editor for this column\n        },\n        last: {\n            label: \"Last Name\",\n            editor: \"ha-text-field\"     // Editor for this column\n        },\n        totalHR: \"Home Runs\"\n    },\n\n    // State is being used for these options. See the full example for the constructor.\n    options = {\n        autoheight: true,\n        rowsPerPage: 50,\n        showTableBar: true,\n\n        // Edit options and callbacks\n        showEditMode: true,\n        editable: false,\n        editableFields: [],         // No columns are editable by default\n        editMode: \"specific\",       // We want to update specific columns instead of all of them\n        onClickEdit: event => {     // Listen for the click on the edit button so we can show our custom popover with column choices\n            console.log(\"You clicked edit\", event);\n            this.popover.api.show();\n        },\n        onSave: event => {\n            console.log(\"You saved your edits\", event);\n\n            // Save edits to the collection\n            this.table.api.save();\n\n            // Flip the editable state on the table\n            const state = Object.assign({}, this.state);\n            state.options.editable = false;\n            this.setState(state);\n        }\n    },\n    handlePopoverRef(popover) {\n        this.popover = popover;     // Get a reference to the popover component instance\n    }\n    handleTableRef = (table) => {\n        this.table = table;         // Get a reference to the table component instance\n    },\n    handleSelect(name) {\n        // When a column choice is made: close the popover, turn on editing for the selected column\n        // @see EditColumnPopover.jsx\n        this.popover.api.close();\n\n        // Mark the selected column as editable and turn on editing for the table\n        const state = Object.assign({}, this.state);\n        state.options.editableFields = [name];\n        state.options.editable = true;\n        this.setState(state);\n    },\n\n    // TODO Is this the best way to get a reference to the edit node?\n    editButtonSelector = \"#exampleWrapper .tablebar button[name='edit']\";\n\n// @see EditColumnPopover.jsx\nReactDOM.render(<div id=\"exampleWrapper\">\n    <EditColumnPopover onSelect={handleSelect} targetSelector={editButtonSelector} ref={handlePopoverRef} />\n    <Table collection={collection} columns={columns} options={options} ref={handleTableRef} />\n</div>, document.body);`;\n    }\n\n    getCollection() {\n        return new RequestMemory({\n            target: \"js/app/modules/table/hof-batting.json\"\n        });\n    }\n\n    getColumns() {\n        return {\n            first: {\n                label: \"First Name\",\n                editor: \"ha-text-field\"     // Editor for this column\n            },\n            last: {\n                label: \"Last Name\",\n                editor: \"ha-text-field\"     // Editor for this column\n            },\n            totalHR: \"Home Runs\"\n        };\n    }\n\n    handleSelect(name) {\n        // When a column choice is made: close the popover, turn on editing for the selected column\n        // @see EditColumnPopover.jsx\n        this.popover.api.close();\n\n        const state = Object.assign({}, this.state);\n        state.options.editableFields = [name];\n        state.options.editable = true;\n        this.setState(state);\n    }\n\n    handleTableWrapperRef(table) {\n        this.table = table;\n    }\n\n    handlePopoverWrapperRef(popover) {\n        this.popover = popover;\n    }\n\n    getComponent() {\n        const collection = this.getCollection(),\n            columns = this.getColumns(),\n            options = this.state.options,\n            handleTableRef = this.handleTableWrapperRef.bind(this),\n            handlePopoverRef = this.handlePopoverWrapperRef.bind(this),\n            handleSelect = this.handleSelect.bind(this),\n\n            // TODO Is this the best way to get a reference to the edit node?\n            editButtonSelector = \"#exampleWrapper .tablebar button[name='edit']\";\n\n        return (\n            <div id=\"exampleWrapper\">\n                <EditColumnPopover onSelect={handleSelect} targetSelector={editButtonSelector} ref={handlePopoverRef} />\n                <Table collection={collection} columns={columns} options={options} ref={handleTableRef} />\n            </div>\n        );\n    }\n}\n"]}