{"version":3,"sources":["../../../../../../../gallery/src/js/app/modules/drawer-small/drawer-small.view.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBASe,mBAAS,IAAI,CAAC,MAAM,CAAC;;AAEhC,cAAM,EAAE;AACJ,yDAA6C,EAAE,UAAU;SAC5D;;AAED,gBAAQ,EAAE,kBAAS,GAAG,EAAE;AACpB,gBAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC3C,gBAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SACtE;;AAED,cAAM,EAAE,kBAAW;AACf,gBAAI,CAAC,UAAU,kBAAU,CAAC;AAC1B,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,gBAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrF,gBAAI,CAAC,iBAAiB,EAAE,CAAC;AACzB,gBAAI,CAAC,eAAe,EAAE,CAAC;;AAEvB,mBAAO,IAAI,CAAC;SACf;;AAED,yBAAiB,EAAE,2BAAS,QAAQ,EAAE;AAClC,gBAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,aAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO,EAAI;AACtC,oBAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,sBAAM,CAAC,OAAO,GAAG,YAAM;AACnB,wBAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,0BAAM,CAAC,IAAI,EAAE,CAAC;iBACjB,CAAC;aACL,CAAC,CAAC;SACN;;AAED,kBAAU,EAAE,oBAAS,QAAQ,EAAE;AAC3B,gBAAI,QAAQ,GAAG,qBAAW,OAAO,CAAC,QAAQ,CAAC;gBACvC,IAAI,GAAG,QAAQ,CAAC,EAAC,qBAAqB,uBAAc,EAAC,CAAC,CAAC;;AAE3D,gBAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB;;AAED,kBAAU,EAAE,oBAAS,aAAa,EAAE,wBAAwB,EAAE;AAC1D,gBAAI,MAAM,GAAG,uBAAa,KAAK,uBAAc;gBACzC,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;AAErC,mCAAa,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;SAC9C;;AAED,uBAAe,EAAE,2BAAW;;;AACxB,gBAAI,MAAM,YAAA;gBACN,KAAK,YAAA,CAAC;;AAEV,aAAC,MAAM,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO,EAAI;AAChC,qBAAK,GAAG,MAAK,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,sBAAM,GAAG,MAAK,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,qBAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;aAC7B,CAAC,CAAC;SACN;;AAED,gBAAQ,EAAE,kBAAS,aAAa,EAAE;AAC9B,6BAAO,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;SACpD;KACJ,CAAC","file":"drawer-small.view.js","sourcesContent":["/* jshint ignore:start */\n\nimport Backbone from 'backbone';\nimport handlebars from 'hbs/handlebars';\nimport template from 'text!./drawer.hbs';\nimport domConstruct from 'dojo/dom-construct';\nimport demoTemplate from 'text!./drawer-small.html';\nimport demoJS from './drawer';\n\nexport default Backbone.View.extend({\n\n    events: {\n        'click ha-segmented-button.usage-tab-buttons': 'navigate'\n    },\n\n    navigate: function(evt) {\n        this.$el.find('.panel').addClass('hidden');\n        this.$el.find('#' + evt.currentTarget.value).removeClass('hidden');\n    },\n\n    render: function() {\n        this.renderHTML(template);\n        this.renderJS(this.$el.find('#programmaticWay')[0]);\n        this.renderDojo(this.$el.find('#dojoProgrammaticWay')[0], this.$el.find('#dojo')[0]);\n        this.addEventListeners();\n        this.relocateDrawers();\n\n        return this;\n    },\n\n    addEventListeners: function(panelIds) {\n        let self = this;\n\n        [\"html\", \"dojo\", \"js\"].forEach(panelId => {\n            let button = self.$el.find(\"#\" + panelId + \" .ha-button\")[0];\n            button.onclick = () => {\n                let drawer = self.$el.find(\"#\" + panelId + \" ha-drawer-small\")[0];\n                drawer.show();\n            };\n        });\n    },\n\n    renderHTML: function(template) {\n        var compiled = handlebars.compile(template),\n            html = compiled({componentDemoTemplate: demoTemplate});\n\n        this.$el.html(html);\n    },\n\n    renderDojo: function(placeToAppend, placeToAppendDrawerSmall) {\n        var drawer = domConstruct.toDom(demoTemplate),\n            cloned1 = drawer.cloneNode(true);\n\n        domConstruct.place(cloned1, placeToAppend);\n    },\n\n    relocateDrawers: function() {\n        let drawer,\n            panel;\n\n        [\"html\", \"dojo\"].forEach(panelId => {\n            panel = this.$el.find(\"#\" + panelId + \".panel\")[0];\n            drawer = this.$el.find(\"#\" + panelId + \" ha-drawer-small\")[0];\n            panel.appendChild(drawer);\n        });\n    },\n\n    renderJS: function(placeToAppend) {\n        demoJS.renderSmallDrawer(placeToAppend, this.el);\n    }\n});\n\n/* jshint ignore:end */\n"]}